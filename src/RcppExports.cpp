// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// fit_rr
arma::vec fit_rr(arma::mat X, arma::mat y, double lambda);
RcppExport SEXP _RcppRidge_fit_rr(SEXP XSEXP, SEXP ySEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_rr(X, y, lambda));
    return rcpp_result_gen;
END_RCPP
}
// predict_rr
arma::vec predict_rr(arma::mat X, arma::vec beta);
RcppExport SEXP _RcppRidge_predict_rr(SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_rr(X, beta));
    return rcpp_result_gen;
END_RCPP
}
// get_ocv_once
double get_ocv_once(arma::mat X, arma::mat y, double lambda);
RcppExport SEXP _RcppRidge_get_ocv_once(SEXP XSEXP, SEXP ySEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_ocv_once(X, y, lambda));
    return rcpp_result_gen;
END_RCPP
}
// get_ocv
double get_ocv(arma::mat X, arma::mat y, double lambda, arma::mat U, arma::vec s);
RcppExport SEXP _RcppRidge_get_ocv(SEXP XSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP USEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(get_ocv(X, y, lambda, U, s));
    return rcpp_result_gen;
END_RCPP
}
// optim_rr
arma::vec optim_rr(arma::mat X, arma::mat y, arma::vec lams);
RcppExport SEXP _RcppRidge_optim_rr(SEXP XSEXP, SEXP ySEXP, SEXP lamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lams(lamsSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_rr(X, y, lams));
    return rcpp_result_gen;
END_RCPP
}
// par_reg
Rcpp::List par_reg(arma::mat X, arma::mat y, arma::vec lams, arma::vec idx);
RcppExport SEXP _RcppRidge_par_reg(SEXP XSEXP, SEXP ySEXP, SEXP lamsSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lams(lamsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(par_reg(X, y, lams, idx));
    return rcpp_result_gen;
END_RCPP
}
// predict_groups
arma::vec predict_groups(arma::mat X, arma::mat betas, arma::vec idx);
RcppExport SEXP _RcppRidge_predict_groups(SEXP XSEXP, SEXP betasSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_groups(X, betas, idx));
    return rcpp_result_gen;
END_RCPP
}
// rmvn_omp
arma::mat rmvn_omp(unsigned int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _RcppRidge_rmvn_omp(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvn_omp(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppRidge_fit_rr", (DL_FUNC) &_RcppRidge_fit_rr, 3},
    {"_RcppRidge_predict_rr", (DL_FUNC) &_RcppRidge_predict_rr, 2},
    {"_RcppRidge_get_ocv_once", (DL_FUNC) &_RcppRidge_get_ocv_once, 3},
    {"_RcppRidge_get_ocv", (DL_FUNC) &_RcppRidge_get_ocv, 5},
    {"_RcppRidge_optim_rr", (DL_FUNC) &_RcppRidge_optim_rr, 3},
    {"_RcppRidge_par_reg", (DL_FUNC) &_RcppRidge_par_reg, 4},
    {"_RcppRidge_predict_groups", (DL_FUNC) &_RcppRidge_predict_groups, 3},
    {"_RcppRidge_rmvn_omp", (DL_FUNC) &_RcppRidge_rmvn_omp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppRidge(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
